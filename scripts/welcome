#!/usr/bin/env python3
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWidgets import QVBoxLayout
from PyQt5.QtWidgets import QWidget, QPushButton, QLabel
from PyQt5.QtCore import QSize, pyqtSlot, QTimer

from amd_r_welcome.generate_rsa import generate_key_pair
from amd_r_welcome.widgets import SliderWidget2, QLineEditWithLabel
import requests
from pathlib import Path
from json import loads
import yaml
from secrets import token_hex


class WelcomeWindow(QMainWindow):
    """Main Window for AMD-R welcome script."""
    def __init__(self):
        super().__init__()
        self.retry_count = 0
        self.key_generated = False

        # Setting file paths
        script_path = Path('.').resolve()
        src_path = script_path.parent.parent
        config_path = src_path.joinpath('iot/config')
        self.private_file = config_path.joinpath('private.pem')
        self.public_file = config_path.joinpath('public.pem')
        self.server_file = config_path.joinpath('server.yml')

        # Creating Needed path
        Path.mkdir(config_path)
        # Generating private key token
        self.password = token_hex(32)

        # Adding dummy central widget
        # https://doc.qt.io/qt-5/qmainwindow.html#qt-main-window-framework
        self.setCentralWidget(QWidget())

        # Setting up pages
        # Page 1
        self.page_1 = QLabel("Thank You for choosing the AMD-R! Press Next to "
                             "continue")
        # Page 2
        self.page_2 = QLineEditWithLabel("Please input name for this AMD-R")
        # Page 3
        self.page_3 = QLineEditWithLabel("Please input the server to connect to\n\
        Including the http/https", "https://")
        # Page 4
        self.page_4 = QLineEditWithLabel("Please input server port number")
        # Page 5
        self.page_5 = QLabel("Name: \n"
                             "Host: \n"
                             "Port: ")
        # Page 6
        self.page_6 = QLabel("Generating RSA key...")
        self.text_1 = "Making Registration Request..."
        self.text_2 = "Waiting for verification..."
        self.text_3 = "AMD-R Succesfully Registered."

        # Page 7
        self.page_7 = QWidget()
        page_7_layout = QVBoxLayout(self.page_7)
        page_7_layout.addWidget(QLabel("AMD-R setup complete."))
        exit_button = QPushButton("Exit")
        exit_button.clicked.connect(self.close)
        page_7_layout.addWidget(exit_button)

        # Setting Typed in data
        self.name_text = self.page_2.text()
        self.host_text = self.page_3.text()
        self.port_text = self.page_4.text()

        # Slider for 1st page
        self.slider1 = SliderWidget2(self.page_1, self)

        # Slider for the 2nd page
        self.slider2: SliderWidget2 = (
            self.slider1.create_next(self.page_2, allow_previous=False)
        )
        self.slider2.disable_next()
        self.page_2.textChanged[str].connect(
            lambda text: self.enable_next(text, self.slider2)
        )
        self.page_2.textChanged.connect(self.update_confirm)

        # Slider for the 3rd page
        self.slider3: SliderWidget2 = (
            self.slider1.create_next(self.page_3)
        )
        self.slider3.disable_next()
        self.page_3.textChanged[str].connect(
            lambda text: self.enable_host(text)
        )
        self.page_3.textChanged.connect(self.update_confirm)

        # Slider for the 4th page
        self.slider4: SliderWidget2 = self.slider1.create_next(self.page_4)
        self.slider4.disable_next()
        self.page_4.textChanged[str].connect(
            lambda text: self.enable_port(text)
        )
        self.page_4.textChanged.connect(self.update_confirm)

        # Slider for the 5th page
        self.slider5: SliderWidget2 = self.slider1.create_next(self.page_5,
                                                               slide_duration=1
                                                               )
        self.slider5.next_button.clicked.connect(lambda: QTimer.singleShot(500,
                                                 self.generate_rsa))

        # Slider for the 6th page
        self.slider6: SliderWidget2 = (
            self.slider1.create_next(self.page_6, allow_previous=False)
        )
        self.slider6.finished.connect(
            lambda: self.page_6.setText(self.text_1)
        )
        self.slider6.finished.connect(
            lambda: self.update_size(self.slider6.widget)
        )
        self.slider6.finished.connect(
            lambda: self.slider6.previous_button.setVisible(False)
        )
        self.slider6.disable_next()

        # Slider for the 7th page
        self.slider7: SliderWidget2 = (
            self.slider1.create_next(self.page_7, allow_previous=False)
        )

    @pyqtSlot()
    def enable_next(self, text: str, slider: SliderWidget2) -> None:
        """Slot to enable the next button of the slider when the QLineEdit changed.
        Parameters
        ----------
        text: str
            Text of the QLineEdit
        slider: SliderWidget2
            The slider widget in which the text changed
        """
        if len(text) > 0:
            slider.enable_next()
        else:
            slider.disable_next()

    @pyqtSlot()
    def enable_host(self, text: str) -> None:
        """Slot to enable the next button of the host slider when the QLineEdit
        changed.
        Parameters
        ----------
        text: str
            Text of the QLineEdit
        """
        if text.startswith(("http://", "https://")):
            index = text.index("/")
            self.enable_next(text[index + 2:], self.slider3)
        else:
            self.slider3.disable_next()

    @pyqtSlot()
    def enable_port(self, text: str) -> None:
        """Slot to enable the next button of the port slider when the QLineEdit
        changed.
        Parameters
        ----------
        text: str
            Text of the QLineEdit
        """
        if text.isnumeric():
            self.slider4.enable_next()
        else:
            self.slider4.disable_next()

    @pyqtSlot()
    def update_confirm(self) -> None:
        """Slot to update the entered data label."""
        self.name_text = self.page_2.text()
        self.host_text = self.page_3.text()
        self.port_text = self.page_4.text()

        # Updating Typed Items
        self.page_5.setText(f"Name: {self.name_text}\n"
                            f"Host: {self.host_text}\n"
                            f"Port: {self.port_text}")

        # Resizing Slider
        self.update_size(self.slider5.widget)

    def update_size(self, widget: QWidget) -> QSize:
        """Resize the QLabel when the text is changed."""
        widget.resize(widget.sizeHint())
        return widget.size()

    @pyqtSlot()
    def generate_rsa(self) -> None:
        """Generates the RSA key pair."""
        if not self.key_generated:
            generate_key_pair(self.password, private_file=self.private_file,
                              public_file=self.public_file)
            self.key_generated = True
            self.page_6.setText(self.text_1)
            self.update_size(self.slider6.widget)
        QTimer.singleShot(500, self.make_registration)

    def show_error(self, message: str, visible: bool) -> None:
        """Shows the error page during the registration process.
        Parameters
        ----------
        message: str
            The error message
        visible: bool
            Sets the visibility of the previous button
        """
        self.page_6.setText(message)
        self.slider6.previous_button.setVisible(visible)
        self.update_size(self.slider6.widget)

    def make_registration(self) -> None:
        """Make a registration request to the server."""
        try:
            self.retry_count += 1

            # Reading public key
            with self.public_file.open('rb') as f:
                key = f.read().decode()

            # Making Request
            self.registartion = requests.post(
                f"{self.host_text}:{self.port_text}/api/amd-r/register", json={
                    'name': self.name_text,
                    'key': key
                }
            )

            # Checking the request status
            if self.registartion.status_code == 400:
                self.show_error("AMD-R with the same name already registered. "
                                "Please change the name.", True)
            else:
                self.page_6.setText(self.text_2)
                self.update_size(self.slider6.widget)
                self.check_verification()
                self.retry_count = 0
        except requests.ConnectionError:
            # Retry 10 times if cannot connect to server
            if self.retry_count < 10:
                self.show_error("Cannot connect to server. Retrying...", False)
                QTimer.singleShot(1000, self.make_registration)
            else:
                self.retry_count = 0
                self.show_error("Unable to connect to server. "
                                "Please retype information", True)
        except requests.exceptions.InvalidURL:
            # If the url is invalid
            self.show_error("Invalid URL please retype information.", True)

    def check_verification(self) -> None:
        """Checks if the AMD-R is verified."""
        try:
            # Making request
            self.verification = requests.post(
                f"{self.host_text}:{self.port_text}"
                "/api/amd-r/test-verification",
                json={
                    'name': self.name_text,
                }
            )

            # Getting results
            verification_status = loads(self.verification.text)["results"]
            # Retry if still haven't verified
            if not verification_status:
                QTimer.singleShot(1000, self.check_verification)
            else:
                # Write config file and change page if verified
                self.write_config()
                self.page_6.setText(self.text_3)
                self.update_size(self.slider6.widget)
                self.slider6.enable_next()
        except requests.ConnectionError:
            # If cannot connect to server
            self.show_error("Cannot connect to server. Retrying...", False)
            QTimer.singleShot(1000, self.make_registration)

    def write_config(self) -> None:
        """Writes server.yml file."""
        with open(self.server_file, 'w') as f:
            yaml.dump({
                'host': self.host_text,
                'port': int(self.port_text),
                'private_key': 'private.pem',
                'public_key': 'public.pem',
                'password': self.password
            }, f)


if __name__ == '__main__':
    app = QApplication(sys.argv)

    window = WelcomeWindow()
    window.showFullScreen()

    sys.exit(app.exec_())
